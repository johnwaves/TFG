// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmacia {
  id         Int         @id @unique @default(autoincrement())
  nombre     String      @unique
  direccion  String
  createdAt  DateTime    @default(now())
  sanitarios Sanitario[]
  pacientes  Paciente[]

  @@index([id], type: Hash)
}

enum UserRole {
  ADMIN
  SANITARIO
  PACIENTE
  TUTOR
}

enum TipoSanitario {
  FARMACEUTICO
  TECNICO
}

enum TipoTratamiento {
  FARMACOLOGICO
  NO_FARMACOLOGICO
}

model User {
  dni              String     @id @unique @db.VarChar(9)
  password         String
  email            String
  nombre           String
  apellidos        String
  createdAt        DateTime @default(now())
  fecha_nacimiento DateTime
  direccion        String
  foto             String?
  role             UserRole
  sanitario        Sanitario? @relation("UserToSanitario")
  paciente         Paciente?  @relation("UserToPaciente")
  tutor            Tutor?     @relation("UserToTutor")

  @@index([dni], type: Hash)
}

model Sanitario {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [dni], name: "UserToSanitario")
  userId       String        @unique
  tipo         TipoSanitario
  idFarmacia   Int
  farmacia     Farmacia      @relation(fields: [idFarmacia], references: [id])
  tratamientos Tratamiento[]

  @@index([idFarmacia], type: Hash)
}

model Paciente {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [dni], name: "UserToPaciente")
  userId        String        @unique
  esDependiente Boolean       @default(false)
  tutor         Tutor?        @relation(fields: [tutorId], references: [id])
  tutorId       Int?          @unique
  tratamientos  Tratamiento[]
  Farmacia      Farmacia?     @relation(fields: [idFarmacia], references: [id])
  idFarmacia    Int?
}

model Tutor {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [dni], name: "UserToTutor")
  userId    String     @unique
  pacientes Paciente[]

  @@index([id], type: Hash)
}

model Dosis {
  id          Int          @id @unique @default(autoincrement())
  cantidad    Int
  intervalo   Int
  duracion    Int
  tratamiento Tratamiento?
}

model Tratamiento {
  id           Int                   @id @unique @default(autoincrement())
  nombre       String                @db.VarChar(100)
  tipo         TipoTratamiento
  createdAt    DateTime              @default(now())
  descripcion  String                @db.VarChar(500)
  dosis        Dosis                 @relation(fields: [idDosis], references: [id])
  idDosis      Int                   @unique
  fecha_inicio DateTime
  fecha_fin    DateTime
  idSanitario  Int
  sanitario    Sanitario             @relation(fields: [idSanitario], references: [id])
  idPaciente   Int
  paciente     Paciente              @relation(fields: [idPaciente], references: [id])
  registro     RegistroTratamiento[]
  puntuacion   Int                   @default(0)
}

model RegistroTratamiento {
  id             Int         @id @unique @default(autoincrement())
  fecha_registro DateTime    @default(now())
  cumplimiento   Boolean
  detalles       String[]
  tratamiento    Tratamiento @relation(fields: [idTratamiento], references: [id])
  idTratamiento  Int         @unique
}
